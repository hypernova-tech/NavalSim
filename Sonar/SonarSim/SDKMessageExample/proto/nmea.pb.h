// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nmea.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nmea_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nmea_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "time.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nmea_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nmea_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace proto {
namespace nmea {
class NmeaData;
struct NmeaDataDefaultTypeInternal;
extern NmeaDataDefaultTypeInternal _NmeaData_default_instance_;
}  // namespace nmea
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::nmea::NmeaData* Arena::CreateMaybeMessage<::proto::nmea::NmeaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace nmea {

// ===================================================================

class NmeaData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.nmea.NmeaData) */ {
 public:
  inline NmeaData() : NmeaData(nullptr) {}
  ~NmeaData() override;
  explicit constexpr NmeaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NmeaData(const NmeaData& from);
  NmeaData(NmeaData&& from) noexcept
    : NmeaData() {
    *this = ::std::move(from);
  }

  inline NmeaData& operator=(const NmeaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NmeaData& operator=(NmeaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NmeaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NmeaData* internal_default_instance() {
    return reinterpret_cast<const NmeaData*>(
               &_NmeaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NmeaData& a, NmeaData& b) {
    a.Swap(&b);
  }
  inline void Swap(NmeaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NmeaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NmeaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NmeaData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NmeaData& from);
  void MergeFrom(const NmeaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NmeaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.nmea.NmeaData";
  }
  protected:
  explicit NmeaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSentenceFieldNumber = 2,
    kTimeFieldNumber = 1,
    kPlaybackTimeFieldNumber = 3,
  };
  // optional string sentence = 2;
  bool has_sentence() const;
  private:
  bool _internal_has_sentence() const;
  public:
  void clear_sentence();
  const std::string& sentence() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sentence(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sentence();
  PROTOBUF_NODISCARD std::string* release_sentence();
  void set_allocated_sentence(std::string* sentence);
  private:
  const std::string& _internal_sentence() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sentence(const std::string& value);
  std::string* _internal_mutable_sentence();
  public:

  // optional .proto.time.Time time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::proto::time::Time& time() const;
  PROTOBUF_NODISCARD ::proto::time::Time* release_time();
  ::proto::time::Time* mutable_time();
  void set_allocated_time(::proto::time::Time* time);
  private:
  const ::proto::time::Time& _internal_time() const;
  ::proto::time::Time* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::proto::time::Time* time);
  ::proto::time::Time* unsafe_arena_release_time();

  // optional .proto.time.Time playback_time = 3;
  bool has_playback_time() const;
  private:
  bool _internal_has_playback_time() const;
  public:
  void clear_playback_time();
  const ::proto::time::Time& playback_time() const;
  PROTOBUF_NODISCARD ::proto::time::Time* release_playback_time();
  ::proto::time::Time* mutable_playback_time();
  void set_allocated_playback_time(::proto::time::Time* playback_time);
  private:
  const ::proto::time::Time& _internal_playback_time() const;
  ::proto::time::Time* _internal_mutable_playback_time();
  public:
  void unsafe_arena_set_allocated_playback_time(
      ::proto::time::Time* playback_time);
  ::proto::time::Time* unsafe_arena_release_playback_time();

  // @@protoc_insertion_point(class_scope:proto.nmea.NmeaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sentence_;
  ::proto::time::Time* time_;
  ::proto::time::Time* playback_time_;
  friend struct ::TableStruct_nmea_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NmeaData

// optional .proto.time.Time time = 1;
inline bool NmeaData::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool NmeaData::has_time() const {
  return _internal_has_time();
}
inline const ::proto::time::Time& NmeaData::_internal_time() const {
  const ::proto::time::Time* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::time::Time&>(
      ::proto::time::_Time_default_instance_);
}
inline const ::proto::time::Time& NmeaData::time() const {
  // @@protoc_insertion_point(field_get:proto.nmea.NmeaData.time)
  return _internal_time();
}
inline void NmeaData::unsafe_arena_set_allocated_time(
    ::proto::time::Time* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.nmea.NmeaData.time)
}
inline ::proto::time::Time* NmeaData::release_time() {
  _has_bits_[0] &= ~0x00000002u;
  ::proto::time::Time* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::time::Time* NmeaData::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:proto.nmea.NmeaData.time)
  _has_bits_[0] &= ~0x00000002u;
  ::proto::time::Time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::proto::time::Time* NmeaData::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000002u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::time::Time>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline ::proto::time::Time* NmeaData::mutable_time() {
  ::proto::time::Time* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:proto.nmea.NmeaData.time)
  return _msg;
}
inline void NmeaData::set_allocated_time(::proto::time::Time* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:proto.nmea.NmeaData.time)
}

// optional .proto.time.Time playback_time = 3;
inline bool NmeaData::_internal_has_playback_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || playback_time_ != nullptr);
  return value;
}
inline bool NmeaData::has_playback_time() const {
  return _internal_has_playback_time();
}
inline const ::proto::time::Time& NmeaData::_internal_playback_time() const {
  const ::proto::time::Time* p = playback_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::time::Time&>(
      ::proto::time::_Time_default_instance_);
}
inline const ::proto::time::Time& NmeaData::playback_time() const {
  // @@protoc_insertion_point(field_get:proto.nmea.NmeaData.playback_time)
  return _internal_playback_time();
}
inline void NmeaData::unsafe_arena_set_allocated_playback_time(
    ::proto::time::Time* playback_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playback_time_);
  }
  playback_time_ = playback_time;
  if (playback_time) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.nmea.NmeaData.playback_time)
}
inline ::proto::time::Time* NmeaData::release_playback_time() {
  _has_bits_[0] &= ~0x00000004u;
  ::proto::time::Time* temp = playback_time_;
  playback_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::time::Time* NmeaData::unsafe_arena_release_playback_time() {
  // @@protoc_insertion_point(field_release:proto.nmea.NmeaData.playback_time)
  _has_bits_[0] &= ~0x00000004u;
  ::proto::time::Time* temp = playback_time_;
  playback_time_ = nullptr;
  return temp;
}
inline ::proto::time::Time* NmeaData::_internal_mutable_playback_time() {
  _has_bits_[0] |= 0x00000004u;
  if (playback_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::time::Time>(GetArenaForAllocation());
    playback_time_ = p;
  }
  return playback_time_;
}
inline ::proto::time::Time* NmeaData::mutable_playback_time() {
  ::proto::time::Time* _msg = _internal_mutable_playback_time();
  // @@protoc_insertion_point(field_mutable:proto.nmea.NmeaData.playback_time)
  return _msg;
}
inline void NmeaData::set_allocated_playback_time(::proto::time::Time* playback_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(playback_time_);
  }
  if (playback_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playback_time));
    if (message_arena != submessage_arena) {
      playback_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playback_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  playback_time_ = playback_time;
  // @@protoc_insertion_point(field_set_allocated:proto.nmea.NmeaData.playback_time)
}

// optional string sentence = 2;
inline bool NmeaData::_internal_has_sentence() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NmeaData::has_sentence() const {
  return _internal_has_sentence();
}
inline void NmeaData::clear_sentence() {
  sentence_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NmeaData::sentence() const {
  // @@protoc_insertion_point(field_get:proto.nmea.NmeaData.sentence)
  return _internal_sentence();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NmeaData::set_sentence(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.nmea.NmeaData.sentence)
}
inline std::string* NmeaData::mutable_sentence() {
  std::string* _s = _internal_mutable_sentence();
  // @@protoc_insertion_point(field_mutable:proto.nmea.NmeaData.sentence)
  return _s;
}
inline const std::string& NmeaData::_internal_sentence() const {
  return sentence_.Get();
}
inline void NmeaData::_internal_set_sentence(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NmeaData::_internal_mutable_sentence() {
  _has_bits_[0] |= 0x00000001u;
  return sentence_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NmeaData::release_sentence() {
  // @@protoc_insertion_point(field_release:proto.nmea.NmeaData.sentence)
  if (!_internal_has_sentence()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = sentence_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sentence_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NmeaData::set_allocated_sentence(std::string* sentence) {
  if (sentence != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sentence_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sentence,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sentence_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.nmea.NmeaData.sentence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace nmea
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nmea_2eproto
