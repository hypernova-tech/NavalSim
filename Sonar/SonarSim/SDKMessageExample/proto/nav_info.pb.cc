// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav_info.proto

#include "nav_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
namespace nav_info {
constexpr Depth::Depth(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nmea_(nullptr)
  , depth_(0){}
struct DepthDefaultTypeInternal {
  constexpr DepthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DepthDefaultTypeInternal() {}
  union {
    Depth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DepthDefaultTypeInternal _Depth_default_instance_;
constexpr Heading::Heading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nmea_(nullptr)
  , heading_(0)
  , type_(0)
{}
struct HeadingDefaultTypeInternal {
  constexpr HeadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadingDefaultTypeInternal() {}
  union {
    Heading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadingDefaultTypeInternal _Heading_default_instance_;
constexpr Position::Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nmea_(nullptr)
  , lat_(0)
  , lon_(0){}
struct PositionDefaultTypeInternal {
  constexpr PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PositionDefaultTypeInternal _Position_default_instance_;
constexpr Speed::Speed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nmea_(nullptr)
  , speed_(0){}
struct SpeedDefaultTypeInternal {
  constexpr SpeedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedDefaultTypeInternal() {}
  union {
    Speed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedDefaultTypeInternal _Speed_default_instance_;
constexpr DualSpeed::DualSpeed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nmea_(nullptr)
  , ground_transversal_(0)
  , ground_longitudinal_(0){}
struct DualSpeedDefaultTypeInternal {
  constexpr DualSpeedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DualSpeedDefaultTypeInternal() {}
  union {
    DualSpeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DualSpeedDefaultTypeInternal _DualSpeed_default_instance_;
constexpr RateOfTurn::RateOfTurn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nmea_(nullptr)
  , rot_(0){}
struct RateOfTurnDefaultTypeInternal {
  constexpr RateOfTurnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RateOfTurnDefaultTypeInternal() {}
  union {
    RateOfTurn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RateOfTurnDefaultTypeInternal _RateOfTurn_default_instance_;
constexpr CourseOverGround::CourseOverGround(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nmea_(nullptr)
  , true_heading_(0){}
struct CourseOverGroundDefaultTypeInternal {
  constexpr CourseOverGroundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CourseOverGroundDefaultTypeInternal() {}
  union {
    CourseOverGround _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CourseOverGroundDefaultTypeInternal _CourseOverGround_default_instance_;
constexpr UTCTime::UTCTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(nullptr){}
struct UTCTimeDefaultTypeInternal {
  constexpr UTCTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UTCTimeDefaultTypeInternal() {}
  union {
    UTCTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UTCTimeDefaultTypeInternal _UTCTime_default_instance_;
constexpr LocalTime::LocalTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(nullptr){}
struct LocalTimeDefaultTypeInternal {
  constexpr LocalTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalTimeDefaultTypeInternal() {}
  union {
    LocalTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalTimeDefaultTypeInternal _LocalTime_default_instance_;
constexpr FilteredState::FilteredState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(nullptr)
  , lat_(0)
  , lon_(0)
  , speed_(0)
  , heading_(0)
  , course_(0)
  , rot_(0)
  , filter_enabled_(false)
  , latlon_is_filtered_(false)
  , heading_is_filtered_(false){}
struct FilteredStateDefaultTypeInternal {
  constexpr FilteredStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilteredStateDefaultTypeInternal() {}
  union {
    FilteredState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilteredStateDefaultTypeInternal _FilteredState_default_instance_;
}  // namespace nav_info
}  // namespace proto
namespace proto {
namespace nav_info {
bool Heading_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Heading_Type_strings[4] = {};

static const char Heading_Type_names[] =
  "OBSOLETE_kMagnetic"
  "OBSOLETE_kSensor"
  "kManufactured"
  "kTrue";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Heading_Type_entries[] = {
  { {Heading_Type_names + 0, 18}, 1 },
  { {Heading_Type_names + 18, 16}, 0 },
  { {Heading_Type_names + 34, 13}, 3 },
  { {Heading_Type_names + 47, 5}, 2 },
};

static const int Heading_Type_entries_by_number[] = {
  1, // 0 -> OBSOLETE_kSensor
  0, // 1 -> OBSOLETE_kMagnetic
  3, // 2 -> kTrue
  2, // 3 -> kManufactured
};

const std::string& Heading_Type_Name(
    Heading_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Heading_Type_entries,
          Heading_Type_entries_by_number,
          4, Heading_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Heading_Type_entries,
      Heading_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Heading_Type_strings[idx].get();
}
bool Heading_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Heading_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Heading_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Heading_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Heading_Type Heading::OBSOLETE_kSensor;
constexpr Heading_Type Heading::OBSOLETE_kMagnetic;
constexpr Heading_Type Heading::kTrue;
constexpr Heading_Type Heading::kManufactured;
constexpr Heading_Type Heading::Type_MIN;
constexpr Heading_Type Heading::Type_MAX;
constexpr int Heading::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Depth::_Internal {
 public:
  using HasBits = decltype(std::declval<Depth>()._has_bits_);
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::nmea::NmeaData& nmea(const Depth* msg);
  static void set_has_nmea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::nmea::NmeaData&
Depth::_Internal::nmea(const Depth* msg) {
  return *msg->nmea_;
}
void Depth::clear_nmea() {
  if (nmea_ != nullptr) nmea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Depth::Depth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.Depth)
}
Depth::Depth(const Depth& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nmea()) {
    nmea_ = new ::proto::nmea::NmeaData(*from.nmea_);
  } else {
    nmea_ = nullptr;
  }
  depth_ = from.depth_;
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.Depth)
}

inline void Depth::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nmea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&depth_) -
    reinterpret_cast<char*>(&nmea_)) + sizeof(depth_));
}

Depth::~Depth() {
  // @@protoc_insertion_point(destructor:proto.nav_info.Depth)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Depth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nmea_;
}

void Depth::ArenaDtor(void* object) {
  Depth* _this = reinterpret_cast< Depth* >(object);
  (void)_this;
}
void Depth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Depth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Depth::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.Depth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmea_ != nullptr);
    nmea_->Clear();
  }
  depth_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Depth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nmea.NmeaData nmea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nmea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Depth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.Depth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double depth = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_depth(), target);
  }

  // optional .proto.nmea.NmeaData nmea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nmea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.Depth)
  return target;
}

size_t Depth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.Depth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.nmea.NmeaData nmea = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nmea_);
    }

    // optional double depth = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Depth::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Depth*>(
      &from));
}

void Depth::MergeFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.Depth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nmea()->::proto::nmea::NmeaData::MergeFrom(from._internal_nmea());
    }
    if (cached_has_bits & 0x00000002u) {
      depth_ = from.depth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Depth::CopyFrom(const Depth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.Depth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Depth::IsInitialized() const {
  return true;
}

void Depth::InternalSwap(Depth* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Depth, depth_)
      + sizeof(Depth::depth_)
      - PROTOBUF_FIELD_OFFSET(Depth, nmea_)>(
          reinterpret_cast<char*>(&nmea_),
          reinterpret_cast<char*>(&other->nmea_));
}

std::string Depth::GetTypeName() const {
  return "proto.nav_info.Depth";
}


// ===================================================================

class Heading::_Internal {
 public:
  using HasBits = decltype(std::declval<Heading>()._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::nmea::NmeaData& nmea(const Heading* msg);
  static void set_has_nmea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::nmea::NmeaData&
Heading::_Internal::nmea(const Heading* msg) {
  return *msg->nmea_;
}
void Heading::clear_nmea() {
  if (nmea_ != nullptr) nmea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Heading::Heading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.Heading)
}
Heading::Heading(const Heading& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nmea()) {
    nmea_ = new ::proto::nmea::NmeaData(*from.nmea_);
  } else {
    nmea_ = nullptr;
  }
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.Heading)
}

inline void Heading::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nmea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&nmea_)) + sizeof(type_));
}

Heading::~Heading() {
  // @@protoc_insertion_point(destructor:proto.nav_info.Heading)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Heading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nmea_;
}

void Heading::ArenaDtor(void* object) {
  Heading* _this = reinterpret_cast< Heading* >(object);
  (void)_this;
}
void Heading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Heading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Heading::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.Heading)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmea_ != nullptr);
    nmea_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Heading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nav_info.Heading.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::nav_info::Heading_Type_IsValid(val))) {
            _internal_set_type(static_cast<::proto::nav_info::Heading_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nmea.NmeaData nmea = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nmea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heading::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.Heading)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double heading = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading(), target);
  }

  // optional .proto.nav_info.Heading.Type type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .proto.nmea.NmeaData nmea = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nmea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.Heading)
  return target;
}

size_t Heading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.Heading)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.nmea.NmeaData nmea = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nmea_);
    }

    // optional double heading = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .proto.nav_info.Heading.Type type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heading::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Heading*>(
      &from));
}

void Heading::MergeFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.Heading)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nmea()->::proto::nmea::NmeaData::MergeFrom(from._internal_nmea());
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Heading::CopyFrom(const Heading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.Heading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heading::IsInitialized() const {
  return true;
}

void Heading::InternalSwap(Heading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heading, type_)
      + sizeof(Heading::type_)
      - PROTOBUF_FIELD_OFFSET(Heading, nmea_)>(
          reinterpret_cast<char*>(&nmea_),
          reinterpret_cast<char*>(&other->nmea_));
}

std::string Heading::GetTypeName() const {
  return "proto.nav_info.Heading";
}


// ===================================================================

class Position::_Internal {
 public:
  using HasBits = decltype(std::declval<Position>()._has_bits_);
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::nmea::NmeaData& nmea(const Position* msg);
  static void set_has_nmea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::nmea::NmeaData&
Position::_Internal::nmea(const Position* msg) {
  return *msg->nmea_;
}
void Position::clear_nmea() {
  if (nmea_ != nullptr) nmea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nmea()) {
    nmea_ = new ::proto::nmea::NmeaData(*from.nmea_);
  } else {
    nmea_ = nullptr;
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.Position)
}

inline void Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nmea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lon_) -
    reinterpret_cast<char*>(&nmea_)) + sizeof(lon_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:proto.nav_info.Position)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nmea_;
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmea_ != nullptr);
    nmea_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lon_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(lon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nmea.NmeaData nmea = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_nmea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // optional double lon = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  // optional .proto.nmea.NmeaData nmea = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::nmea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.nmea.NmeaData nmea = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nmea_);
    }

    // optional double lat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Position*>(
      &from));
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.Position)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nmea()->::proto::nmea::NmeaData::MergeFrom(from._internal_nmea());
    }
    if (cached_has_bits & 0x00000002u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000004u) {
      lon_ = from.lon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, lon_)
      + sizeof(Position::lon_)
      - PROTOBUF_FIELD_OFFSET(Position, nmea_)>(
          reinterpret_cast<char*>(&nmea_),
          reinterpret_cast<char*>(&other->nmea_));
}

std::string Position::GetTypeName() const {
  return "proto.nav_info.Position";
}


// ===================================================================

class Speed::_Internal {
 public:
  using HasBits = decltype(std::declval<Speed>()._has_bits_);
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::nmea::NmeaData& nmea(const Speed* msg);
  static void set_has_nmea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::nmea::NmeaData&
Speed::_Internal::nmea(const Speed* msg) {
  return *msg->nmea_;
}
void Speed::clear_nmea() {
  if (nmea_ != nullptr) nmea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
Speed::Speed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.Speed)
}
Speed::Speed(const Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nmea()) {
    nmea_ = new ::proto::nmea::NmeaData(*from.nmea_);
  } else {
    nmea_ = nullptr;
  }
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.Speed)
}

inline void Speed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nmea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&nmea_)) + sizeof(speed_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:proto.nav_info.Speed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void Speed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nmea_;
}

void Speed::ArenaDtor(void* object) {
  Speed* _this = reinterpret_cast< Speed* >(object);
  (void)_this;
}
void Speed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.Speed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmea_ != nullptr);
    nmea_->Clear();
  }
  speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Speed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nmea.NmeaData nmea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nmea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Speed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.Speed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double speed = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed(), target);
  }

  // optional .proto.nmea.NmeaData nmea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nmea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.Speed)
  return target;
}

size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.Speed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.nmea.NmeaData nmea = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nmea_);
    }

    // optional double speed = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Speed::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Speed*>(
      &from));
}

void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nmea()->::proto::nmea::NmeaData::MergeFrom(from._internal_nmea());
    }
    if (cached_has_bits & 0x00000002u) {
      speed_ = from.speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  return true;
}

void Speed::InternalSwap(Speed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Speed, speed_)
      + sizeof(Speed::speed_)
      - PROTOBUF_FIELD_OFFSET(Speed, nmea_)>(
          reinterpret_cast<char*>(&nmea_),
          reinterpret_cast<char*>(&other->nmea_));
}

std::string Speed::GetTypeName() const {
  return "proto.nav_info.Speed";
}


// ===================================================================

class DualSpeed::_Internal {
 public:
  using HasBits = decltype(std::declval<DualSpeed>()._has_bits_);
  static void set_has_ground_transversal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ground_longitudinal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::proto::nmea::NmeaData& nmea(const DualSpeed* msg);
  static void set_has_nmea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::nmea::NmeaData&
DualSpeed::_Internal::nmea(const DualSpeed* msg) {
  return *msg->nmea_;
}
void DualSpeed::clear_nmea() {
  if (nmea_ != nullptr) nmea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DualSpeed::DualSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.DualSpeed)
}
DualSpeed::DualSpeed(const DualSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nmea()) {
    nmea_ = new ::proto::nmea::NmeaData(*from.nmea_);
  } else {
    nmea_ = nullptr;
  }
  ::memcpy(&ground_transversal_, &from.ground_transversal_,
    static_cast<size_t>(reinterpret_cast<char*>(&ground_longitudinal_) -
    reinterpret_cast<char*>(&ground_transversal_)) + sizeof(ground_longitudinal_));
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.DualSpeed)
}

inline void DualSpeed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nmea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ground_longitudinal_) -
    reinterpret_cast<char*>(&nmea_)) + sizeof(ground_longitudinal_));
}

DualSpeed::~DualSpeed() {
  // @@protoc_insertion_point(destructor:proto.nav_info.DualSpeed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void DualSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nmea_;
}

void DualSpeed::ArenaDtor(void* object) {
  DualSpeed* _this = reinterpret_cast< DualSpeed* >(object);
  (void)_this;
}
void DualSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DualSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DualSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.DualSpeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmea_ != nullptr);
    nmea_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&ground_transversal_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ground_longitudinal_) -
        reinterpret_cast<char*>(&ground_transversal_)) + sizeof(ground_longitudinal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DualSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float ground_transversal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_ground_transversal(&has_bits);
          ground_transversal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ground_longitudinal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_ground_longitudinal(&has_bits);
          ground_longitudinal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nmea.NmeaData nmea = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nmea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DualSpeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.DualSpeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float ground_transversal = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_ground_transversal(), target);
  }

  // optional float ground_longitudinal = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ground_longitudinal(), target);
  }

  // optional .proto.nmea.NmeaData nmea = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::nmea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.DualSpeed)
  return target;
}

size_t DualSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.DualSpeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.nmea.NmeaData nmea = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nmea_);
    }

    // optional float ground_transversal = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float ground_longitudinal = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DualSpeed::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DualSpeed*>(
      &from));
}

void DualSpeed::MergeFrom(const DualSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.DualSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nmea()->::proto::nmea::NmeaData::MergeFrom(from._internal_nmea());
    }
    if (cached_has_bits & 0x00000002u) {
      ground_transversal_ = from.ground_transversal_;
    }
    if (cached_has_bits & 0x00000004u) {
      ground_longitudinal_ = from.ground_longitudinal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DualSpeed::CopyFrom(const DualSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.DualSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualSpeed::IsInitialized() const {
  return true;
}

void DualSpeed::InternalSwap(DualSpeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DualSpeed, ground_longitudinal_)
      + sizeof(DualSpeed::ground_longitudinal_)
      - PROTOBUF_FIELD_OFFSET(DualSpeed, nmea_)>(
          reinterpret_cast<char*>(&nmea_),
          reinterpret_cast<char*>(&other->nmea_));
}

std::string DualSpeed::GetTypeName() const {
  return "proto.nav_info.DualSpeed";
}


// ===================================================================

class RateOfTurn::_Internal {
 public:
  using HasBits = decltype(std::declval<RateOfTurn>()._has_bits_);
  static void set_has_rot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::nmea::NmeaData& nmea(const RateOfTurn* msg);
  static void set_has_nmea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::nmea::NmeaData&
RateOfTurn::_Internal::nmea(const RateOfTurn* msg) {
  return *msg->nmea_;
}
void RateOfTurn::clear_nmea() {
  if (nmea_ != nullptr) nmea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RateOfTurn::RateOfTurn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.RateOfTurn)
}
RateOfTurn::RateOfTurn(const RateOfTurn& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nmea()) {
    nmea_ = new ::proto::nmea::NmeaData(*from.nmea_);
  } else {
    nmea_ = nullptr;
  }
  rot_ = from.rot_;
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.RateOfTurn)
}

inline void RateOfTurn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nmea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rot_) -
    reinterpret_cast<char*>(&nmea_)) + sizeof(rot_));
}

RateOfTurn::~RateOfTurn() {
  // @@protoc_insertion_point(destructor:proto.nav_info.RateOfTurn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void RateOfTurn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nmea_;
}

void RateOfTurn::ArenaDtor(void* object) {
  RateOfTurn* _this = reinterpret_cast< RateOfTurn* >(object);
  (void)_this;
}
void RateOfTurn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RateOfTurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateOfTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.RateOfTurn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmea_ != nullptr);
    nmea_->Clear();
  }
  rot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RateOfTurn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float rot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_rot(&has_bits);
          rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nmea.NmeaData nmea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nmea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RateOfTurn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.RateOfTurn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float rot = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_rot(), target);
  }

  // optional .proto.nmea.NmeaData nmea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nmea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.RateOfTurn)
  return target;
}

size_t RateOfTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.RateOfTurn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.nmea.NmeaData nmea = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nmea_);
    }

    // optional float rot = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateOfTurn::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RateOfTurn*>(
      &from));
}

void RateOfTurn::MergeFrom(const RateOfTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.RateOfTurn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nmea()->::proto::nmea::NmeaData::MergeFrom(from._internal_nmea());
    }
    if (cached_has_bits & 0x00000002u) {
      rot_ = from.rot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RateOfTurn::CopyFrom(const RateOfTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.RateOfTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateOfTurn::IsInitialized() const {
  return true;
}

void RateOfTurn::InternalSwap(RateOfTurn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RateOfTurn, rot_)
      + sizeof(RateOfTurn::rot_)
      - PROTOBUF_FIELD_OFFSET(RateOfTurn, nmea_)>(
          reinterpret_cast<char*>(&nmea_),
          reinterpret_cast<char*>(&other->nmea_));
}

std::string RateOfTurn::GetTypeName() const {
  return "proto.nav_info.RateOfTurn";
}


// ===================================================================

class CourseOverGround::_Internal {
 public:
  using HasBits = decltype(std::declval<CourseOverGround>()._has_bits_);
  static void set_has_true_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::nmea::NmeaData& nmea(const CourseOverGround* msg);
  static void set_has_nmea(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::nmea::NmeaData&
CourseOverGround::_Internal::nmea(const CourseOverGround* msg) {
  return *msg->nmea_;
}
void CourseOverGround::clear_nmea() {
  if (nmea_ != nullptr) nmea_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CourseOverGround::CourseOverGround(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.CourseOverGround)
}
CourseOverGround::CourseOverGround(const CourseOverGround& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_nmea()) {
    nmea_ = new ::proto::nmea::NmeaData(*from.nmea_);
  } else {
    nmea_ = nullptr;
  }
  true_heading_ = from.true_heading_;
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.CourseOverGround)
}

inline void CourseOverGround::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nmea_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&true_heading_) -
    reinterpret_cast<char*>(&nmea_)) + sizeof(true_heading_));
}

CourseOverGround::~CourseOverGround() {
  // @@protoc_insertion_point(destructor:proto.nav_info.CourseOverGround)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CourseOverGround::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete nmea_;
}

void CourseOverGround::ArenaDtor(void* object) {
  CourseOverGround* _this = reinterpret_cast< CourseOverGround* >(object);
  (void)_this;
}
void CourseOverGround::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CourseOverGround::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CourseOverGround::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.CourseOverGround)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(nmea_ != nullptr);
    nmea_->Clear();
  }
  true_heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CourseOverGround::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float true_heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_true_heading(&has_bits);
          true_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.nmea.NmeaData nmea = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nmea(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CourseOverGround::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.CourseOverGround)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float true_heading = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_true_heading(), target);
  }

  // optional .proto.nmea.NmeaData nmea = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::nmea(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.CourseOverGround)
  return target;
}

size_t CourseOverGround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.CourseOverGround)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.nmea.NmeaData nmea = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nmea_);
    }

    // optional float true_heading = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CourseOverGround::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CourseOverGround*>(
      &from));
}

void CourseOverGround::MergeFrom(const CourseOverGround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.CourseOverGround)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_nmea()->::proto::nmea::NmeaData::MergeFrom(from._internal_nmea());
    }
    if (cached_has_bits & 0x00000002u) {
      true_heading_ = from.true_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CourseOverGround::CopyFrom(const CourseOverGround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.CourseOverGround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CourseOverGround::IsInitialized() const {
  return true;
}

void CourseOverGround::InternalSwap(CourseOverGround* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CourseOverGround, true_heading_)
      + sizeof(CourseOverGround::true_heading_)
      - PROTOBUF_FIELD_OFFSET(CourseOverGround, nmea_)>(
          reinterpret_cast<char*>(&nmea_),
          reinterpret_cast<char*>(&other->nmea_));
}

std::string CourseOverGround::GetTypeName() const {
  return "proto.nav_info.CourseOverGround";
}


// ===================================================================

class UTCTime::_Internal {
 public:
  using HasBits = decltype(std::declval<UTCTime>()._has_bits_);
  static const ::proto::time::Time& time(const UTCTime* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::time::Time&
UTCTime::_Internal::time(const UTCTime* msg) {
  return *msg->time_;
}
void UTCTime::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
UTCTime::UTCTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.UTCTime)
}
UTCTime::UTCTime(const UTCTime& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::proto::time::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.UTCTime)
}

inline void UTCTime::SharedCtor() {
time_ = nullptr;
}

UTCTime::~UTCTime() {
  // @@protoc_insertion_point(destructor:proto.nav_info.UTCTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void UTCTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
}

void UTCTime::ArenaDtor(void* object) {
  UTCTime* _this = reinterpret_cast< UTCTime* >(object);
  (void)_this;
}
void UTCTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UTCTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UTCTime::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.UTCTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != nullptr);
    time_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UTCTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.time.Time time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UTCTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.UTCTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.time.Time time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.UTCTime)
  return target;
}

size_t UTCTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.UTCTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.time.Time time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UTCTime::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UTCTime*>(
      &from));
}

void UTCTime::MergeFrom(const UTCTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.UTCTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _internal_mutable_time()->::proto::time::Time::MergeFrom(from._internal_time());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UTCTime::CopyFrom(const UTCTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.UTCTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UTCTime::IsInitialized() const {
  return true;
}

void UTCTime::InternalSwap(UTCTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_, other->time_);
}

std::string UTCTime::GetTypeName() const {
  return "proto.nav_info.UTCTime";
}


// ===================================================================

class LocalTime::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalTime>()._has_bits_);
  static const ::proto::time::Time& time(const LocalTime* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::time::Time&
LocalTime::_Internal::time(const LocalTime* msg) {
  return *msg->time_;
}
void LocalTime::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
LocalTime::LocalTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.LocalTime)
}
LocalTime::LocalTime(const LocalTime& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::proto::time::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.LocalTime)
}

inline void LocalTime::SharedCtor() {
time_ = nullptr;
}

LocalTime::~LocalTime() {
  // @@protoc_insertion_point(destructor:proto.nav_info.LocalTime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void LocalTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
}

void LocalTime::ArenaDtor(void* object) {
  LocalTime* _this = reinterpret_cast< LocalTime* >(object);
  (void)_this;
}
void LocalTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalTime::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.LocalTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != nullptr);
    time_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.time.Time time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.LocalTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.time.Time time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.LocalTime)
  return target;
}

size_t LocalTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.LocalTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.time.Time time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTime::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LocalTime*>(
      &from));
}

void LocalTime::MergeFrom(const LocalTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.LocalTime)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _internal_mutable_time()->::proto::time::Time::MergeFrom(from._internal_time());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalTime::CopyFrom(const LocalTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.LocalTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTime::IsInitialized() const {
  return true;
}

void LocalTime::InternalSwap(LocalTime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_, other->time_);
}

std::string LocalTime::GetTypeName() const {
  return "proto.nav_info.LocalTime";
}


// ===================================================================

class FilteredState::_Internal {
 public:
  using HasBits = decltype(std::declval<FilteredState>()._has_bits_);
  static const ::proto::time::Time& time(const FilteredState* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filter_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latlon_is_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_heading_is_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_course(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::proto::time::Time&
FilteredState::_Internal::time(const FilteredState* msg) {
  return *msg->time_;
}
void FilteredState::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
FilteredState::FilteredState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nav_info.FilteredState)
}
FilteredState::FilteredState(const FilteredState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::proto::time::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&heading_is_filtered_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(heading_is_filtered_));
  // @@protoc_insertion_point(copy_constructor:proto.nav_info.FilteredState)
}

inline void FilteredState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heading_is_filtered_) -
    reinterpret_cast<char*>(&time_)) + sizeof(heading_is_filtered_));
}

FilteredState::~FilteredState() {
  // @@protoc_insertion_point(destructor:proto.nav_info.FilteredState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void FilteredState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
}

void FilteredState::ArenaDtor(void* object) {
  FilteredState* _this = reinterpret_cast< FilteredState* >(object);
  (void)_this;
}
void FilteredState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilteredState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FilteredState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nav_info.FilteredState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != nullptr);
    time_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_enabled_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(filter_enabled_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&latlon_is_filtered_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&heading_is_filtered_) -
        reinterpret_cast<char*>(&latlon_is_filtered_)) + sizeof(heading_is_filtered_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FilteredState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double course = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_course(&has_bits);
          course_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_rot(&has_bits);
          rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.time.Time time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool filter_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_filter_enabled(&has_bits);
          filter_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool latlon_is_filtered = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_latlon_is_filtered(&has_bits);
          latlon_is_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool heading_is_filtered = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_heading_is_filtered(&has_bits);
          heading_is_filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilteredState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nav_info.FilteredState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // optional double lon = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  // optional double speed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed(), target);
  }

  // optional double heading = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading(), target);
  }

  // optional double course = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_course(), target);
  }

  // optional double rot = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_rot(), target);
  }

  // optional .proto.time.Time time = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::time(this), target, stream);
  }

  // optional bool filter_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_filter_enabled(), target);
  }

  // optional bool latlon_is_filtered = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_latlon_is_filtered(), target);
  }

  // optional bool heading_is_filtered = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_heading_is_filtered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nav_info.FilteredState)
  return target;
}

size_t FilteredState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nav_info.FilteredState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.time.Time time = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_);
    }

    // optional double lat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double speed = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double heading = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double course = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double rot = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional bool filter_enabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool latlon_is_filtered = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool heading_is_filtered = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilteredState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FilteredState*>(
      &from));
}

void FilteredState::MergeFrom(const FilteredState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nav_info.FilteredState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_time()->::proto::time::Time::MergeFrom(from._internal_time());
    }
    if (cached_has_bits & 0x00000002u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000004u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000008u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000020u) {
      course_ = from.course_;
    }
    if (cached_has_bits & 0x00000040u) {
      rot_ = from.rot_;
    }
    if (cached_has_bits & 0x00000080u) {
      filter_enabled_ = from.filter_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      latlon_is_filtered_ = from.latlon_is_filtered_;
    }
    if (cached_has_bits & 0x00000200u) {
      heading_is_filtered_ = from.heading_is_filtered_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FilteredState::CopyFrom(const FilteredState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nav_info.FilteredState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilteredState::IsInitialized() const {
  return true;
}

void FilteredState::InternalSwap(FilteredState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FilteredState, heading_is_filtered_)
      + sizeof(FilteredState::heading_is_filtered_)
      - PROTOBUF_FIELD_OFFSET(FilteredState, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

std::string FilteredState::GetTypeName() const {
  return "proto.nav_info.FilteredState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nav_info
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::nav_info::Depth* Arena::CreateMaybeMessage< ::proto::nav_info::Depth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::Depth >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::Heading* Arena::CreateMaybeMessage< ::proto::nav_info::Heading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::Heading >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::Position* Arena::CreateMaybeMessage< ::proto::nav_info::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::Speed* Arena::CreateMaybeMessage< ::proto::nav_info::Speed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::DualSpeed* Arena::CreateMaybeMessage< ::proto::nav_info::DualSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::DualSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::RateOfTurn* Arena::CreateMaybeMessage< ::proto::nav_info::RateOfTurn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::RateOfTurn >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::CourseOverGround* Arena::CreateMaybeMessage< ::proto::nav_info::CourseOverGround >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::CourseOverGround >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::UTCTime* Arena::CreateMaybeMessage< ::proto::nav_info::UTCTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::UTCTime >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::LocalTime* Arena::CreateMaybeMessage< ::proto::nav_info::LocalTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::LocalTime >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::nav_info::FilteredState* Arena::CreateMaybeMessage< ::proto::nav_info::FilteredState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nav_info::FilteredState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
