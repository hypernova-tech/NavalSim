// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grid_description.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grid_5fdescription_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grid_5fdescription_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grid_5fdescription_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grid_5fdescription_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace proto {
namespace grid_description {
class GridDescription;
struct GridDescriptionDefaultTypeInternal;
extern GridDescriptionDefaultTypeInternal _GridDescription_default_instance_;
}  // namespace grid_description
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::grid_description::GridDescription* Arena::CreateMaybeMessage<::proto::grid_description::GridDescription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace grid_description {

enum GridDescription_GridMode : int {
  GridDescription_GridMode_kFixed = 0,
  GridDescription_GridMode_kAlternating = 1
};
bool GridDescription_GridMode_IsValid(int value);
constexpr GridDescription_GridMode GridDescription_GridMode_GridMode_MIN = GridDescription_GridMode_kFixed;
constexpr GridDescription_GridMode GridDescription_GridMode_GridMode_MAX = GridDescription_GridMode_kAlternating;
constexpr int GridDescription_GridMode_GridMode_ARRAYSIZE = GridDescription_GridMode_GridMode_MAX + 1;

const std::string& GridDescription_GridMode_Name(GridDescription_GridMode value);
template<typename T>
inline const std::string& GridDescription_GridMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GridDescription_GridMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GridDescription_GridMode_Name.");
  return GridDescription_GridMode_Name(static_cast<GridDescription_GridMode>(enum_t_value));
}
bool GridDescription_GridMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GridDescription_GridMode* value);
// ===================================================================

class GridDescription final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.grid_description.GridDescription) */ {
 public:
  inline GridDescription() : GridDescription(nullptr) {}
  ~GridDescription() override;
  explicit constexpr GridDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GridDescription(const GridDescription& from);
  GridDescription(GridDescription&& from) noexcept
    : GridDescription() {
    *this = ::std::move(from);
  }

  inline GridDescription& operator=(const GridDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridDescription& operator=(GridDescription&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GridDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const GridDescription* internal_default_instance() {
    return reinterpret_cast<const GridDescription*>(
               &_GridDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GridDescription& a, GridDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(GridDescription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GridDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GridDescription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GridDescription& from);
  void MergeFrom(const GridDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridDescription* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.grid_description.GridDescription";
  }
  protected:
  explicit GridDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef GridDescription_GridMode GridMode;
  static constexpr GridMode kFixed =
    GridDescription_GridMode_kFixed;
  static constexpr GridMode kAlternating =
    GridDescription_GridMode_kAlternating;
  static inline bool GridMode_IsValid(int value) {
    return GridDescription_GridMode_IsValid(value);
  }
  static constexpr GridMode GridMode_MIN =
    GridDescription_GridMode_GridMode_MIN;
  static constexpr GridMode GridMode_MAX =
    GridDescription_GridMode_GridMode_MAX;
  static constexpr int GridMode_ARRAYSIZE =
    GridDescription_GridMode_GridMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& GridMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GridMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GridMode_Name.");
    return GridDescription_GridMode_Name(enum_t_value);
  }
  static inline bool GridMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GridMode* value) {
    return GridDescription_GridMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHorAnglesFieldNumber = 2,
    kVerAnglesFieldNumber = 3,
    kMaxRangeFieldNumber = 4,
    kModeFieldNumber = 1,
  };
  // repeated double hor_angles = 2;
  int hor_angles_size() const;
  private:
  int _internal_hor_angles_size() const;
  public:
  void clear_hor_angles();
  private:
  double _internal_hor_angles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_hor_angles() const;
  void _internal_add_hor_angles(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_hor_angles();
  public:
  double hor_angles(int index) const;
  void set_hor_angles(int index, double value);
  void add_hor_angles(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      hor_angles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_hor_angles();

  // repeated double ver_angles = 3;
  int ver_angles_size() const;
  private:
  int _internal_ver_angles_size() const;
  public:
  void clear_ver_angles();
  private:
  double _internal_ver_angles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ver_angles() const;
  void _internal_add_ver_angles(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ver_angles();
  public:
  double ver_angles(int index) const;
  void set_ver_angles(int index, double value);
  void add_ver_angles(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ver_angles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ver_angles();

  // optional double max_range = 4;
  bool has_max_range() const;
  private:
  bool _internal_has_max_range() const;
  public:
  void clear_max_range();
  double max_range() const;
  void set_max_range(double value);
  private:
  double _internal_max_range() const;
  void _internal_set_max_range(double value);
  public:

  // optional .proto.grid_description.GridDescription.GridMode mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::proto::grid_description::GridDescription_GridMode mode() const;
  void set_mode(::proto::grid_description::GridDescription_GridMode value);
  private:
  ::proto::grid_description::GridDescription_GridMode _internal_mode() const;
  void _internal_set_mode(::proto::grid_description::GridDescription_GridMode value);
  public:

  // @@protoc_insertion_point(class_scope:proto.grid_description.GridDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > hor_angles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ver_angles_;
  double max_range_;
  int mode_;
  friend struct ::TableStruct_grid_5fdescription_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GridDescription

// optional .proto.grid_description.GridDescription.GridMode mode = 1;
inline bool GridDescription::_internal_has_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GridDescription::has_mode() const {
  return _internal_has_mode();
}
inline void GridDescription::clear_mode() {
  mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::grid_description::GridDescription_GridMode GridDescription::_internal_mode() const {
  return static_cast< ::proto::grid_description::GridDescription_GridMode >(mode_);
}
inline ::proto::grid_description::GridDescription_GridMode GridDescription::mode() const {
  // @@protoc_insertion_point(field_get:proto.grid_description.GridDescription.mode)
  return _internal_mode();
}
inline void GridDescription::_internal_set_mode(::proto::grid_description::GridDescription_GridMode value) {
  assert(::proto::grid_description::GridDescription_GridMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  mode_ = value;
}
inline void GridDescription::set_mode(::proto::grid_description::GridDescription_GridMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:proto.grid_description.GridDescription.mode)
}

// repeated double hor_angles = 2;
inline int GridDescription::_internal_hor_angles_size() const {
  return hor_angles_.size();
}
inline int GridDescription::hor_angles_size() const {
  return _internal_hor_angles_size();
}
inline void GridDescription::clear_hor_angles() {
  hor_angles_.Clear();
}
inline double GridDescription::_internal_hor_angles(int index) const {
  return hor_angles_.Get(index);
}
inline double GridDescription::hor_angles(int index) const {
  // @@protoc_insertion_point(field_get:proto.grid_description.GridDescription.hor_angles)
  return _internal_hor_angles(index);
}
inline void GridDescription::set_hor_angles(int index, double value) {
  hor_angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.grid_description.GridDescription.hor_angles)
}
inline void GridDescription::_internal_add_hor_angles(double value) {
  hor_angles_.Add(value);
}
inline void GridDescription::add_hor_angles(double value) {
  _internal_add_hor_angles(value);
  // @@protoc_insertion_point(field_add:proto.grid_description.GridDescription.hor_angles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridDescription::_internal_hor_angles() const {
  return hor_angles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridDescription::hor_angles() const {
  // @@protoc_insertion_point(field_list:proto.grid_description.GridDescription.hor_angles)
  return _internal_hor_angles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridDescription::_internal_mutable_hor_angles() {
  return &hor_angles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridDescription::mutable_hor_angles() {
  // @@protoc_insertion_point(field_mutable_list:proto.grid_description.GridDescription.hor_angles)
  return _internal_mutable_hor_angles();
}

// repeated double ver_angles = 3;
inline int GridDescription::_internal_ver_angles_size() const {
  return ver_angles_.size();
}
inline int GridDescription::ver_angles_size() const {
  return _internal_ver_angles_size();
}
inline void GridDescription::clear_ver_angles() {
  ver_angles_.Clear();
}
inline double GridDescription::_internal_ver_angles(int index) const {
  return ver_angles_.Get(index);
}
inline double GridDescription::ver_angles(int index) const {
  // @@protoc_insertion_point(field_get:proto.grid_description.GridDescription.ver_angles)
  return _internal_ver_angles(index);
}
inline void GridDescription::set_ver_angles(int index, double value) {
  ver_angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.grid_description.GridDescription.ver_angles)
}
inline void GridDescription::_internal_add_ver_angles(double value) {
  ver_angles_.Add(value);
}
inline void GridDescription::add_ver_angles(double value) {
  _internal_add_ver_angles(value);
  // @@protoc_insertion_point(field_add:proto.grid_description.GridDescription.ver_angles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridDescription::_internal_ver_angles() const {
  return ver_angles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GridDescription::ver_angles() const {
  // @@protoc_insertion_point(field_list:proto.grid_description.GridDescription.ver_angles)
  return _internal_ver_angles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridDescription::_internal_mutable_ver_angles() {
  return &ver_angles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GridDescription::mutable_ver_angles() {
  // @@protoc_insertion_point(field_mutable_list:proto.grid_description.GridDescription.ver_angles)
  return _internal_mutable_ver_angles();
}

// optional double max_range = 4;
inline bool GridDescription::_internal_has_max_range() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GridDescription::has_max_range() const {
  return _internal_has_max_range();
}
inline void GridDescription::clear_max_range() {
  max_range_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double GridDescription::_internal_max_range() const {
  return max_range_;
}
inline double GridDescription::max_range() const {
  // @@protoc_insertion_point(field_get:proto.grid_description.GridDescription.max_range)
  return _internal_max_range();
}
inline void GridDescription::_internal_set_max_range(double value) {
  _has_bits_[0] |= 0x00000001u;
  max_range_ = value;
}
inline void GridDescription::set_max_range(double value) {
  _internal_set_max_range(value);
  // @@protoc_insertion_point(field_set:proto.grid_description.GridDescription.max_range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace grid_description
}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::grid_description::GridDescription_GridMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grid_5fdescription_2eproto
