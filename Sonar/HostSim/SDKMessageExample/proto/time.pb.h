// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_time_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_time_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_time_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_time_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace proto {
namespace time {
class Time;
struct TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
}  // namespace time
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::time::Time* Arena::CreateMaybeMessage<::proto::time::Time>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace time {

// ===================================================================

class Time final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.time.Time) */ {
 public:
  inline Time() : Time(nullptr) {}
  ~Time() override;
  explicit constexpr Time(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Time& default_instance() {
    return *internal_default_instance();
  }
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Time* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.time.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearFieldNumber = 1,
    kMonthFieldNumber = 2,
    kDayFieldNumber = 3,
    kHourFieldNumber = 4,
    kMinuteFieldNumber = 5,
    kSecondFieldNumber = 6,
    kMillisecondFieldNumber = 7,
  };
  // optional uint32 year = 1;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  uint32_t year() const;
  void set_year(uint32_t value);
  private:
  uint32_t _internal_year() const;
  void _internal_set_year(uint32_t value);
  public:

  // optional uint32 month = 2;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  uint32_t month() const;
  void set_month(uint32_t value);
  private:
  uint32_t _internal_month() const;
  void _internal_set_month(uint32_t value);
  public:

  // optional uint32 day = 3;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  uint32_t day() const;
  void set_day(uint32_t value);
  private:
  uint32_t _internal_day() const;
  void _internal_set_day(uint32_t value);
  public:

  // optional uint32 hour = 4;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  uint32_t hour() const;
  void set_hour(uint32_t value);
  private:
  uint32_t _internal_hour() const;
  void _internal_set_hour(uint32_t value);
  public:

  // optional uint32 minute = 5;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  uint32_t minute() const;
  void set_minute(uint32_t value);
  private:
  uint32_t _internal_minute() const;
  void _internal_set_minute(uint32_t value);
  public:

  // optional uint32 second = 6;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  uint32_t second() const;
  void set_second(uint32_t value);
  private:
  uint32_t _internal_second() const;
  void _internal_set_second(uint32_t value);
  public:

  // optional uint32 millisecond = 7;
  bool has_millisecond() const;
  private:
  bool _internal_has_millisecond() const;
  public:
  void clear_millisecond();
  uint32_t millisecond() const;
  void set_millisecond(uint32_t value);
  private:
  uint32_t _internal_millisecond() const;
  void _internal_set_millisecond(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.time.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t year_;
  uint32_t month_;
  uint32_t day_;
  uint32_t hour_;
  uint32_t minute_;
  uint32_t second_;
  uint32_t millisecond_;
  friend struct ::TableStruct_time_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Time

// optional uint32 year = 1;
inline bool Time::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Time::has_year() const {
  return _internal_has_year();
}
inline void Time::clear_year() {
  year_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Time::_internal_year() const {
  return year_;
}
inline uint32_t Time::year() const {
  // @@protoc_insertion_point(field_get:proto.time.Time.year)
  return _internal_year();
}
inline void Time::_internal_set_year(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  year_ = value;
}
inline void Time::set_year(uint32_t value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:proto.time.Time.year)
}

// optional uint32 month = 2;
inline bool Time::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Time::has_month() const {
  return _internal_has_month();
}
inline void Time::clear_month() {
  month_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Time::_internal_month() const {
  return month_;
}
inline uint32_t Time::month() const {
  // @@protoc_insertion_point(field_get:proto.time.Time.month)
  return _internal_month();
}
inline void Time::_internal_set_month(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  month_ = value;
}
inline void Time::set_month(uint32_t value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:proto.time.Time.month)
}

// optional uint32 day = 3;
inline bool Time::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Time::has_day() const {
  return _internal_has_day();
}
inline void Time::clear_day() {
  day_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Time::_internal_day() const {
  return day_;
}
inline uint32_t Time::day() const {
  // @@protoc_insertion_point(field_get:proto.time.Time.day)
  return _internal_day();
}
inline void Time::_internal_set_day(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  day_ = value;
}
inline void Time::set_day(uint32_t value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:proto.time.Time.day)
}

// optional uint32 hour = 4;
inline bool Time::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Time::has_hour() const {
  return _internal_has_hour();
}
inline void Time::clear_hour() {
  hour_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Time::_internal_hour() const {
  return hour_;
}
inline uint32_t Time::hour() const {
  // @@protoc_insertion_point(field_get:proto.time.Time.hour)
  return _internal_hour();
}
inline void Time::_internal_set_hour(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  hour_ = value;
}
inline void Time::set_hour(uint32_t value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:proto.time.Time.hour)
}

// optional uint32 minute = 5;
inline bool Time::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Time::has_minute() const {
  return _internal_has_minute();
}
inline void Time::clear_minute() {
  minute_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Time::_internal_minute() const {
  return minute_;
}
inline uint32_t Time::minute() const {
  // @@protoc_insertion_point(field_get:proto.time.Time.minute)
  return _internal_minute();
}
inline void Time::_internal_set_minute(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  minute_ = value;
}
inline void Time::set_minute(uint32_t value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:proto.time.Time.minute)
}

// optional uint32 second = 6;
inline bool Time::_internal_has_second() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Time::has_second() const {
  return _internal_has_second();
}
inline void Time::clear_second() {
  second_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t Time::_internal_second() const {
  return second_;
}
inline uint32_t Time::second() const {
  // @@protoc_insertion_point(field_get:proto.time.Time.second)
  return _internal_second();
}
inline void Time::_internal_set_second(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  second_ = value;
}
inline void Time::set_second(uint32_t value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:proto.time.Time.second)
}

// optional uint32 millisecond = 7;
inline bool Time::_internal_has_millisecond() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Time::has_millisecond() const {
  return _internal_has_millisecond();
}
inline void Time::clear_millisecond() {
  millisecond_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Time::_internal_millisecond() const {
  return millisecond_;
}
inline uint32_t Time::millisecond() const {
  // @@protoc_insertion_point(field_get:proto.time.Time.millisecond)
  return _internal_millisecond();
}
inline void Time::_internal_set_millisecond(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  millisecond_ = value;
}
inline void Time::set_millisecond(uint32_t value) {
  _internal_set_millisecond(value);
  // @@protoc_insertion_point(field_set:proto.time.Time.millisecond)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace time
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_time_2eproto
