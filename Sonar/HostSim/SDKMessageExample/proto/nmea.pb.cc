// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nmea.proto

#include "nmea.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
namespace nmea {
constexpr NmeaData::NmeaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sentence_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_(nullptr)
  , playback_time_(nullptr){}
struct NmeaDataDefaultTypeInternal {
  constexpr NmeaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NmeaDataDefaultTypeInternal() {}
  union {
    NmeaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NmeaDataDefaultTypeInternal _NmeaData_default_instance_;
}  // namespace nmea
}  // namespace proto
namespace proto {
namespace nmea {

// ===================================================================

class NmeaData::_Internal {
 public:
  using HasBits = decltype(std::declval<NmeaData>()._has_bits_);
  static const ::proto::time::Time& time(const NmeaData* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::proto::time::Time& playback_time(const NmeaData* msg);
  static void set_has_playback_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sentence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::time::Time&
NmeaData::_Internal::time(const NmeaData* msg) {
  return *msg->time_;
}
const ::proto::time::Time&
NmeaData::_Internal::playback_time(const NmeaData* msg) {
  return *msg->playback_time_;
}
void NmeaData::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void NmeaData::clear_playback_time() {
  if (playback_time_ != nullptr) playback_time_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
NmeaData::NmeaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.nmea.NmeaData)
}
NmeaData::NmeaData(const NmeaData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sentence()) {
    sentence_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sentence(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    time_ = new ::proto::time::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_playback_time()) {
    playback_time_ = new ::proto::time::Time(*from.playback_time_);
  } else {
    playback_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.nmea.NmeaData)
}

inline void NmeaData::SharedCtor() {
sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sentence_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playback_time_) -
    reinterpret_cast<char*>(&time_)) + sizeof(playback_time_));
}

NmeaData::~NmeaData() {
  // @@protoc_insertion_point(destructor:proto.nmea.NmeaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void NmeaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sentence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete playback_time_;
}

void NmeaData::ArenaDtor(void* object) {
  NmeaData* _this = reinterpret_cast< NmeaData* >(object);
  (void)_this;
}
void NmeaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NmeaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NmeaData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.nmea.NmeaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sentence_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(time_ != nullptr);
      time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(playback_time_ != nullptr);
      playback_time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NmeaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .proto.time.Time time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sentence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sentence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.time.Time playback_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_playback_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NmeaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.nmea.NmeaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.time.Time time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // optional string sentence = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sentence(), target);
  }

  // optional .proto.time.Time playback_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::playback_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.nmea.NmeaData)
  return target;
}

size_t NmeaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.nmea.NmeaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sentence = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sentence());
    }

    // optional .proto.time.Time time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_);
    }

    // optional .proto.time.Time playback_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *playback_time_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NmeaData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NmeaData*>(
      &from));
}

void NmeaData::MergeFrom(const NmeaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.nmea.NmeaData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sentence(from._internal_sentence());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_time()->::proto::time::Time::MergeFrom(from._internal_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_playback_time()->::proto::time::Time::MergeFrom(from._internal_playback_time());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NmeaData::CopyFrom(const NmeaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.nmea.NmeaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NmeaData::IsInitialized() const {
  return true;
}

void NmeaData::InternalSwap(NmeaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sentence_, lhs_arena,
      &other->sentence_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NmeaData, playback_time_)
      + sizeof(NmeaData::playback_time_)
      - PROTOBUF_FIELD_OFFSET(NmeaData, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

std::string NmeaData::GetTypeName() const {
  return "proto.nmea.NmeaData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace nmea
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::nmea::NmeaData* Arena::CreateMaybeMessage< ::proto::nmea::NmeaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::nmea::NmeaData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
