// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: array.proto

#include "array.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace proto {
namespace array {
constexpr ArrayData::ArrayData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dims_()
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , order_(0)
{}
struct ArrayDataDefaultTypeInternal {
  constexpr ArrayDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ArrayDataDefaultTypeInternal() {}
  union {
    ArrayData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ArrayDataDefaultTypeInternal _ArrayData_default_instance_;
}  // namespace array
}  // namespace proto
namespace proto {
namespace array {
bool ArrayData_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ArrayData_Type_strings[12] = {};

static const char ArrayData_Type_names[] =
  "BOOL"
  "BYTE"
  "COMPLEX128"
  "COMPLEX64"
  "FLOAT32"
  "FLOAT64"
  "INT16"
  "INT32"
  "INT64"
  "UINT16"
  "UINT32"
  "UINT64";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ArrayData_Type_entries[] = {
  { {ArrayData_Type_names + 0, 4}, 11 },
  { {ArrayData_Type_names + 4, 4}, 0 },
  { {ArrayData_Type_names + 8, 10}, 10 },
  { {ArrayData_Type_names + 18, 9}, 9 },
  { {ArrayData_Type_names + 27, 7}, 7 },
  { {ArrayData_Type_names + 34, 7}, 8 },
  { {ArrayData_Type_names + 41, 5}, 1 },
  { {ArrayData_Type_names + 46, 5}, 3 },
  { {ArrayData_Type_names + 51, 5}, 5 },
  { {ArrayData_Type_names + 56, 6}, 2 },
  { {ArrayData_Type_names + 62, 6}, 4 },
  { {ArrayData_Type_names + 68, 6}, 6 },
};

static const int ArrayData_Type_entries_by_number[] = {
  1, // 0 -> BYTE
  6, // 1 -> INT16
  9, // 2 -> UINT16
  7, // 3 -> INT32
  10, // 4 -> UINT32
  8, // 5 -> INT64
  11, // 6 -> UINT64
  4, // 7 -> FLOAT32
  5, // 8 -> FLOAT64
  3, // 9 -> COMPLEX64
  2, // 10 -> COMPLEX128
  0, // 11 -> BOOL
};

const std::string& ArrayData_Type_Name(
    ArrayData_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ArrayData_Type_entries,
          ArrayData_Type_entries_by_number,
          12, ArrayData_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ArrayData_Type_entries,
      ArrayData_Type_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ArrayData_Type_strings[idx].get();
}
bool ArrayData_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArrayData_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ArrayData_Type_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<ArrayData_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ArrayData_Type ArrayData::BYTE;
constexpr ArrayData_Type ArrayData::INT16;
constexpr ArrayData_Type ArrayData::UINT16;
constexpr ArrayData_Type ArrayData::INT32;
constexpr ArrayData_Type ArrayData::UINT32;
constexpr ArrayData_Type ArrayData::INT64;
constexpr ArrayData_Type ArrayData::UINT64;
constexpr ArrayData_Type ArrayData::FLOAT32;
constexpr ArrayData_Type ArrayData::FLOAT64;
constexpr ArrayData_Type ArrayData::COMPLEX64;
constexpr ArrayData_Type ArrayData::COMPLEX128;
constexpr ArrayData_Type ArrayData::BOOL;
constexpr ArrayData_Type ArrayData::Type_MIN;
constexpr ArrayData_Type ArrayData::Type_MAX;
constexpr int ArrayData::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ArrayData_Order_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ArrayData_Order_strings[2] = {};

static const char ArrayData_Order_names[] =
  "COLUMN_MAJOR"
  "ROW_MAJOR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ArrayData_Order_entries[] = {
  { {ArrayData_Order_names + 0, 12}, 1 },
  { {ArrayData_Order_names + 12, 9}, 0 },
};

static const int ArrayData_Order_entries_by_number[] = {
  1, // 0 -> ROW_MAJOR
  0, // 1 -> COLUMN_MAJOR
};

const std::string& ArrayData_Order_Name(
    ArrayData_Order value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ArrayData_Order_entries,
          ArrayData_Order_entries_by_number,
          2, ArrayData_Order_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ArrayData_Order_entries,
      ArrayData_Order_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ArrayData_Order_strings[idx].get();
}
bool ArrayData_Order_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArrayData_Order* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ArrayData_Order_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ArrayData_Order>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ArrayData_Order ArrayData::ROW_MAJOR;
constexpr ArrayData_Order ArrayData::COLUMN_MAJOR;
constexpr ArrayData_Order ArrayData::Order_MIN;
constexpr ArrayData_Order ArrayData::Order_MAX;
constexpr int ArrayData::Order_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ArrayData::_Internal {
 public:
  using HasBits = decltype(std::declval<ArrayData>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ArrayData::ArrayData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  dims_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:proto.array.ArrayData)
}
ArrayData::ArrayData(const ArrayData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&type_)) + sizeof(order_));
  // @@protoc_insertion_point(copy_constructor:proto.array.ArrayData)
}

inline void ArrayData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&type_)) + sizeof(order_));
}

ArrayData::~ArrayData() {
  // @@protoc_insertion_point(destructor:proto.array.ArrayData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void ArrayData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ArrayData::ArenaDtor(void* object) {
  ArrayData* _this = reinterpret_cast< ArrayData* >(object);
  (void)_this;
}
void ArrayData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ArrayData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ArrayData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.array.ArrayData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_) -
        reinterpret_cast<char*>(&type_)) + sizeof(order_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ArrayData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 dims = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .proto.array.ArrayData.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::array::ArrayData_Type_IsValid(val))) {
            _internal_set_type(static_cast<::proto::array::ArrayData_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .proto.array.ArrayData.Order order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::proto::array::ArrayData_Order_IsValid(val))) {
            _internal_set_order(static_cast<::proto::array::ArrayData_Order>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ArrayData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.array.ArrayData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dims = 1;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dims(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.array.ArrayData.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .proto.array.ArrayData.Order order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_order(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.array.ArrayData)
  return target;
}

size_t ArrayData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.array.ArrayData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dims = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dims_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional .proto.array.ArrayData.Type type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .proto.array.ArrayData.Order order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_order());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ArrayData*>(
      &from));
}

void ArrayData::MergeFrom(const ArrayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.array.ArrayData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      order_ = from.order_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ArrayData::CopyFrom(const ArrayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.array.ArrayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayData::IsInitialized() const {
  return true;
}

void ArrayData::InternalSwap(ArrayData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dims_.InternalSwap(&other->dims_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ArrayData, order_)
      + sizeof(ArrayData::order_)
      - PROTOBUF_FIELD_OFFSET(ArrayData, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string ArrayData::GetTypeName() const {
  return "proto.array.ArrayData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace array
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::array::ArrayData* Arena::CreateMaybeMessage< ::proto::array::ArrayData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::array::ArrayData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
