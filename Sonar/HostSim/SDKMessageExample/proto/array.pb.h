// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: array.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_array_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_array_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_array_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_array_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
namespace proto {
namespace array {
class ArrayData;
struct ArrayDataDefaultTypeInternal;
extern ArrayDataDefaultTypeInternal _ArrayData_default_instance_;
}  // namespace array
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::array::ArrayData* Arena::CreateMaybeMessage<::proto::array::ArrayData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace array {

enum ArrayData_Type : int {
  ArrayData_Type_BYTE = 0,
  ArrayData_Type_INT16 = 1,
  ArrayData_Type_UINT16 = 2,
  ArrayData_Type_INT32 = 3,
  ArrayData_Type_UINT32 = 4,
  ArrayData_Type_INT64 = 5,
  ArrayData_Type_UINT64 = 6,
  ArrayData_Type_FLOAT32 = 7,
  ArrayData_Type_FLOAT64 = 8,
  ArrayData_Type_COMPLEX64 = 9,
  ArrayData_Type_COMPLEX128 = 10,
  ArrayData_Type_BOOL = 11
};
bool ArrayData_Type_IsValid(int value);
constexpr ArrayData_Type ArrayData_Type_Type_MIN = ArrayData_Type_BYTE;
constexpr ArrayData_Type ArrayData_Type_Type_MAX = ArrayData_Type_BOOL;
constexpr int ArrayData_Type_Type_ARRAYSIZE = ArrayData_Type_Type_MAX + 1;

const std::string& ArrayData_Type_Name(ArrayData_Type value);
template<typename T>
inline const std::string& ArrayData_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArrayData_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArrayData_Type_Name.");
  return ArrayData_Type_Name(static_cast<ArrayData_Type>(enum_t_value));
}
bool ArrayData_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArrayData_Type* value);
enum ArrayData_Order : int {
  ArrayData_Order_ROW_MAJOR = 0,
  ArrayData_Order_COLUMN_MAJOR = 1
};
bool ArrayData_Order_IsValid(int value);
constexpr ArrayData_Order ArrayData_Order_Order_MIN = ArrayData_Order_ROW_MAJOR;
constexpr ArrayData_Order ArrayData_Order_Order_MAX = ArrayData_Order_COLUMN_MAJOR;
constexpr int ArrayData_Order_Order_ARRAYSIZE = ArrayData_Order_Order_MAX + 1;

const std::string& ArrayData_Order_Name(ArrayData_Order value);
template<typename T>
inline const std::string& ArrayData_Order_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArrayData_Order>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArrayData_Order_Name.");
  return ArrayData_Order_Name(static_cast<ArrayData_Order>(enum_t_value));
}
bool ArrayData_Order_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArrayData_Order* value);
// ===================================================================

class ArrayData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:proto.array.ArrayData) */ {
 public:
  inline ArrayData() : ArrayData(nullptr) {}
  ~ArrayData() override;
  explicit constexpr ArrayData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArrayData(const ArrayData& from);
  ArrayData(ArrayData&& from) noexcept
    : ArrayData() {
    *this = ::std::move(from);
  }

  inline ArrayData& operator=(const ArrayData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayData& operator=(ArrayData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ArrayData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArrayData* internal_default_instance() {
    return reinterpret_cast<const ArrayData*>(
               &_ArrayData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ArrayData& a, ArrayData& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArrayData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArrayData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArrayData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ArrayData& from);
  void MergeFrom(const ArrayData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ArrayData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.array.ArrayData";
  }
  protected:
  explicit ArrayData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ArrayData_Type Type;
  static constexpr Type BYTE =
    ArrayData_Type_BYTE;
  static constexpr Type INT16 =
    ArrayData_Type_INT16;
  static constexpr Type UINT16 =
    ArrayData_Type_UINT16;
  static constexpr Type INT32 =
    ArrayData_Type_INT32;
  static constexpr Type UINT32 =
    ArrayData_Type_UINT32;
  static constexpr Type INT64 =
    ArrayData_Type_INT64;
  static constexpr Type UINT64 =
    ArrayData_Type_UINT64;
  static constexpr Type FLOAT32 =
    ArrayData_Type_FLOAT32;
  static constexpr Type FLOAT64 =
    ArrayData_Type_FLOAT64;
  static constexpr Type COMPLEX64 =
    ArrayData_Type_COMPLEX64;
  static constexpr Type COMPLEX128 =
    ArrayData_Type_COMPLEX128;
  static constexpr Type BOOL =
    ArrayData_Type_BOOL;
  static inline bool Type_IsValid(int value) {
    return ArrayData_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ArrayData_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ArrayData_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ArrayData_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ArrayData_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ArrayData_Type_Parse(name, value);
  }

  typedef ArrayData_Order Order;
  static constexpr Order ROW_MAJOR =
    ArrayData_Order_ROW_MAJOR;
  static constexpr Order COLUMN_MAJOR =
    ArrayData_Order_COLUMN_MAJOR;
  static inline bool Order_IsValid(int value) {
    return ArrayData_Order_IsValid(value);
  }
  static constexpr Order Order_MIN =
    ArrayData_Order_Order_MIN;
  static constexpr Order Order_MAX =
    ArrayData_Order_Order_MAX;
  static constexpr int Order_ARRAYSIZE =
    ArrayData_Order_Order_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Order_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Order>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Order_Name.");
    return ArrayData_Order_Name(enum_t_value);
  }
  static inline bool Order_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Order* value) {
    return ArrayData_Order_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 1,
    kDataFieldNumber = 4,
    kTypeFieldNumber = 2,
    kOrderFieldNumber = 3,
  };
  // repeated int32 dims = 1;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  int32_t _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_dims() const;
  void _internal_add_dims(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_dims();
  public:
  int32_t dims(int index) const;
  void set_dims(int index, int32_t value);
  void add_dims(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_dims();

  // optional bytes data = 4;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .proto.array.ArrayData.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::proto::array::ArrayData_Type type() const;
  void set_type(::proto::array::ArrayData_Type value);
  private:
  ::proto::array::ArrayData_Type _internal_type() const;
  void _internal_set_type(::proto::array::ArrayData_Type value);
  public:

  // optional .proto.array.ArrayData.Order order = 3;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  ::proto::array::ArrayData_Order order() const;
  void set_order(::proto::array::ArrayData_Order value);
  private:
  ::proto::array::ArrayData_Order _internal_order() const;
  void _internal_set_order(::proto::array::ArrayData_Order value);
  public:

  // @@protoc_insertion_point(class_scope:proto.array.ArrayData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > dims_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  int type_;
  int order_;
  friend struct ::TableStruct_array_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ArrayData

// repeated int32 dims = 1;
inline int ArrayData::_internal_dims_size() const {
  return dims_.size();
}
inline int ArrayData::dims_size() const {
  return _internal_dims_size();
}
inline void ArrayData::clear_dims() {
  dims_.Clear();
}
inline int32_t ArrayData::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline int32_t ArrayData::dims(int index) const {
  // @@protoc_insertion_point(field_get:proto.array.ArrayData.dims)
  return _internal_dims(index);
}
inline void ArrayData::set_dims(int index, int32_t value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.array.ArrayData.dims)
}
inline void ArrayData::_internal_add_dims(int32_t value) {
  dims_.Add(value);
}
inline void ArrayData::add_dims(int32_t value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:proto.array.ArrayData.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ArrayData::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ArrayData::dims() const {
  // @@protoc_insertion_point(field_list:proto.array.ArrayData.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ArrayData::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ArrayData::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:proto.array.ArrayData.dims)
  return _internal_mutable_dims();
}

// optional .proto.array.ArrayData.Type type = 2;
inline bool ArrayData::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ArrayData::has_type() const {
  return _internal_has_type();
}
inline void ArrayData::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::proto::array::ArrayData_Type ArrayData::_internal_type() const {
  return static_cast< ::proto::array::ArrayData_Type >(type_);
}
inline ::proto::array::ArrayData_Type ArrayData::type() const {
  // @@protoc_insertion_point(field_get:proto.array.ArrayData.type)
  return _internal_type();
}
inline void ArrayData::_internal_set_type(::proto::array::ArrayData_Type value) {
  assert(::proto::array::ArrayData_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void ArrayData::set_type(::proto::array::ArrayData_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.array.ArrayData.type)
}

// optional .proto.array.ArrayData.Order order = 3;
inline bool ArrayData::_internal_has_order() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ArrayData::has_order() const {
  return _internal_has_order();
}
inline void ArrayData::clear_order() {
  order_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::array::ArrayData_Order ArrayData::_internal_order() const {
  return static_cast< ::proto::array::ArrayData_Order >(order_);
}
inline ::proto::array::ArrayData_Order ArrayData::order() const {
  // @@protoc_insertion_point(field_get:proto.array.ArrayData.order)
  return _internal_order();
}
inline void ArrayData::_internal_set_order(::proto::array::ArrayData_Order value) {
  assert(::proto::array::ArrayData_Order_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  order_ = value;
}
inline void ArrayData::set_order(::proto::array::ArrayData_Order value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:proto.array.ArrayData.order)
}

// optional bytes data = 4;
inline bool ArrayData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArrayData::has_data() const {
  return _internal_has_data();
}
inline void ArrayData::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ArrayData::data() const {
  // @@protoc_insertion_point(field_get:proto.array.ArrayData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArrayData::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.array.ArrayData.data)
}
inline std::string* ArrayData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto.array.ArrayData.data)
  return _s;
}
inline const std::string& ArrayData::_internal_data() const {
  return data_.Get();
}
inline void ArrayData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ArrayData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ArrayData::release_data() {
  // @@protoc_insertion_point(field_release:proto.array.ArrayData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ArrayData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.array.ArrayData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace array
}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::array::ArrayData_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::proto::array::ArrayData_Order> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_array_2eproto
